{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "604 Assignment .ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyN/+dOuev0yMenwYrT4kRoJ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/NdubuisiDaniel/NdubuisiDaniel/blob/main/604_Calculations%20using%20Numpy\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "meDLw6ve0FmC"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from functools import reduce\n",
        "from google.colab import drive\n",
        "drive.mount('/content/gdrive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Vf5R_sAL00Tf",
        "outputId": "5f153cb7-c5d6-4551-f606-487791ec8d5c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/gdrive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df=pd.read_csv(\"/content/gdrive/My Drive/Colab Notebooks/Video_Store.tsv\",engine='python',sep='\\t', encoding='utf-8',error_bad_lines=False) "
      ],
      "metadata": {
        "id": "vGAIQ3Ns1eva",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "37c706cc-28b3-495d-b0ec-c384c7ec2078"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py:2882: FutureWarning: The error_bad_lines argument has been deprecated and will be removed in a future version.\n",
            "\n",
            "\n",
            "  exec(code_obj, self.user_global_ns, self.user_ns)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0MleeJIf147v",
        "outputId": "29e636dc-5ec6-462a-bb48-85dd800f2baf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(50, 8)"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "cvVaQatq18LK",
        "outputId": "e9ae6521-58d5-4479-cee2-298a9a08e2de"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-13bd38ea-f15d-4d21-a60a-be02d4b72e51\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Cust ID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Income</th>\n",
              "      <th>Age</th>\n",
              "      <th>Rentals</th>\n",
              "      <th>Avg Per Visit</th>\n",
              "      <th>Incidentals</th>\n",
              "      <th>Genre</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>M</td>\n",
              "      <td>$45,000</td>\n",
              "      <td>25</td>\n",
              "      <td>27</td>\n",
              "      <td>2.5</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Action</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>F</td>\n",
              "      <td>$54,000</td>\n",
              "      <td>33</td>\n",
              "      <td>12</td>\n",
              "      <td>3.4</td>\n",
              "      <td>No</td>\n",
              "      <td>Drama</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>F</td>\n",
              "      <td>$32,000</td>\n",
              "      <td>20</td>\n",
              "      <td>42</td>\n",
              "      <td>1.6</td>\n",
              "      <td>No</td>\n",
              "      <td>Comedy</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>F</td>\n",
              "      <td>$59,000</td>\n",
              "      <td>70</td>\n",
              "      <td>16</td>\n",
              "      <td>4.2</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Drama</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>M</td>\n",
              "      <td>$37,000</td>\n",
              "      <td>35</td>\n",
              "      <td>25</td>\n",
              "      <td>3.2</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Action</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>6</td>\n",
              "      <td>M</td>\n",
              "      <td>$18,000</td>\n",
              "      <td>20</td>\n",
              "      <td>33</td>\n",
              "      <td>1.7</td>\n",
              "      <td>No</td>\n",
              "      <td>Action</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>7</td>\n",
              "      <td>F</td>\n",
              "      <td>$29,000</td>\n",
              "      <td>45</td>\n",
              "      <td>19</td>\n",
              "      <td>3.8</td>\n",
              "      <td>No</td>\n",
              "      <td>Drama</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>8</td>\n",
              "      <td>M</td>\n",
              "      <td>$74,000</td>\n",
              "      <td>25</td>\n",
              "      <td>31</td>\n",
              "      <td>2.4</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Action</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>9</td>\n",
              "      <td>M</td>\n",
              "      <td>$38,000</td>\n",
              "      <td>21</td>\n",
              "      <td>18</td>\n",
              "      <td>2.1</td>\n",
              "      <td>No</td>\n",
              "      <td>Comedy</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>10</td>\n",
              "      <td>F</td>\n",
              "      <td>$65,000</td>\n",
              "      <td>40</td>\n",
              "      <td>21</td>\n",
              "      <td>3.3</td>\n",
              "      <td>No</td>\n",
              "      <td>Drama</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-13bd38ea-f15d-4d21-a60a-be02d4b72e51')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-13bd38ea-f15d-4d21-a60a-be02d4b72e51 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-13bd38ea-f15d-4d21-a60a-be02d4b72e51');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ],
            "text/plain": [
              "   Cust ID Gender   Income  Age  Rentals  Avg Per Visit Incidentals   Genre\n",
              "0        1      M  $45,000   25       27            2.5         Yes  Action\n",
              "1        2      F  $54,000   33       12            3.4          No   Drama\n",
              "2        3      F  $32,000   20       42            1.6          No  Comedy\n",
              "3        4      F  $59,000   70       16            4.2         Yes   Drama\n",
              "4        5      M  $37,000   35       25            3.2         Yes  Action\n",
              "5        6      M  $18,000   20       33            1.7          No  Action\n",
              "6        7      F  $29,000   45       19            3.8          No   Drama\n",
              "7        8      M  $74,000   25       31            2.4         Yes  Action\n",
              "8        9      M  $38,000   21       18            2.1          No  Comedy\n",
              "9       10      F  $65,000   40       21            3.3          No   Drama"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "HqOtU6BP2r9w"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Question 1: How many features are there?"
      ],
      "metadata": {
        "id": "p4GomllQ6Myq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(len(df.columns))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D2g0bu8Q3BlP",
        "outputId": "15e9266e-0987-459b-a003-05d9b7ab46db"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "8\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Question 2: How many features are continuous, and how many are nominal?\n",
        "\n",
        "* There are 4 continious variables namely:\n",
        "Income, Age,Rentals and Average per visit.\n",
        "* There are 4 nominal variables namely:\n",
        "Customer ID, Gender, Incidentals and Genre."
      ],
      "metadata": {
        "id": "sTSQBagk6aA8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dataTypeSeries = df.dtypes\n",
        "print(dataTypeSeries)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MQ-_fOUE__FE",
        "outputId": "b091c0e5-7f3e-4ff5-9df6-c8070c4b9eec"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cust ID            int64\n",
            "Gender            object\n",
            "Income            object\n",
            "Age                int64\n",
            "Rentals            int64\n",
            "Avg Per Visit    float64\n",
            "Incidentals       object\n",
            "Genre             object\n",
            "dtype: object\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        ""
      ],
      "metadata": {
        "id": "rMpRM4XO4aDf"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Question 3: For the continuous features, what are the average, median, maximum, and minimum values? What is the standard deviation?\n"
      ],
      "metadata": {
        "id": "AHGOBNbq7tDX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Mean, Min and Max and STD of Age feature\n",
        "df['Age'].describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4vYDHd-E3_o7",
        "outputId": "dab5fba8-94b1-472b-c127-b21e9e78421a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count    50.000000\n",
              "mean     31.560000\n",
              "std      12.000272\n",
              "min      15.000000\n",
              "25%      22.000000\n",
              "50%      30.000000\n",
              "75%      37.500000\n",
              "max      70.000000\n",
              "Name: Age, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#median of Age feature\n",
        "df['Age'].median()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f-9ER6BAVCJW",
        "outputId": "0e11cafa-22f0-4936-f4c3-706e46789730"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "30.0"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Mean, Min and Max and STD of Rentals feature \n",
        "df['Rentals'].describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TkdnJIIvAq4H",
        "outputId": "af85b3ae-3c9c-4bf4-f717-49b3a6478ca8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count    50.000000\n",
              "mean     26.240000\n",
              "std      10.027635\n",
              "min       9.000000\n",
              "25%      19.000000\n",
              "50%      25.000000\n",
              "75%      32.750000\n",
              "max      48.000000\n",
              "Name: Rentals, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#median of Rentals feature\n",
        "df['Rentals'].median()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TiODIcHKV_wF",
        "outputId": "95dcdb7e-0ad1-44bf-c08b-428458588e05"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "25.0"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Mean, Min and Max and STD of Avg Per Visit feature \n",
        "df['Avg Per Visit'].describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Vq3v3Q5JAw-m",
        "outputId": "7ebe9261-9b4d-4e80-e974-08e586d8b2ed"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count    50.000000\n",
              "mean      2.748000\n",
              "std       0.898125\n",
              "min       1.100000\n",
              "25%       2.125000\n",
              "50%       2.750000\n",
              "75%       3.375000\n",
              "max       4.700000\n",
              "Name: Avg Per Visit, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#median of Avg Per Visit feature\n",
        "df['Avg Per Visit'].median()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FFMcy1NgWQ9K",
        "outputId": "f7b51b8e-1fa8-454e-cb98-e36448d16fd0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2.75"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#For the income variable it is currently in form of a string, so to calculate the average, median, maximum, and minimum, I will first convert it to integer.\n",
        "# First we remove the special characters $ and ,\n",
        "df.Income=df.Income.str.replace(\"$\",\"\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "batz1Vu7i8OK",
        "outputId": "e8cb0ca3-ed6b-4a03-94ab-bf480f0f822f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:3: FutureWarning: The default value of regex will change from True to False in a future version. In addition, single character regular expressions will *not* be treated as literal strings when regex=True.\n",
            "  This is separate from the ipykernel package so we can avoid doing imports until\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.Income=df.Income.str.replace(\",\",\"\")"
      ],
      "metadata": {
        "id": "vbc-xbe4yJlR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#now convert to int.\n",
        "df['Income']=pd.to_numeric(df['Income'])"
      ],
      "metadata": {
        "id": "bIZa-o8Wnf_2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Mean, Min and Max and STD of Income feature \n",
        "df['Income'].describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DooUgLRir19K",
        "outputId": "c0058447-5d9d-45b5-b8d5-0e8e42637ddb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count       50.000000\n",
              "mean     42300.000000\n",
              "std      21409.753642\n",
              "min       1000.000000\n",
              "25%      26750.000000\n",
              "50%      41000.000000\n",
              "75%      56750.000000\n",
              "max      89000.000000\n",
              "Name: Income, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#median of Income feature\n",
        "df['Income'].median()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8Qx2W7noWjAF",
        "outputId": "fcc9aafa-9626-431d-d421-01c1b3f13840"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "41000.0"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Question 4: Perform the the following data preparation step on the data (for each add a new column to the original table for comparison purposes)\n",
        "Discretize the (original, non-normalized) Income attribute based on the following categories: High = 60K+; Mid = 25K-59K; Low = less than $25K."
      ],
      "metadata": {
        "id": "NPfokMuxBA7v"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#To do this, I will first find the Min and max values of the feature.\n",
        "#Then use the numpy linspace method to divide the feature into 4 bins\n",
        "#Then assign label to the bins \n",
        "min_value = df['Income'].min()\n",
        "max_value = df['Income'].max()\n",
        "bins = np.linspace(min_value,max_value,4)\n",
        "labels = ['Low', 'Mid', 'High']\n"
      ],
      "metadata": {
        "id": "DRkeoaa6y2hO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Now I will include the bin to our original dataframe.\n",
        "df['bins'] = pd.cut(df['Income'], bins=bins, labels=labels, include_lowest=True)"
      ],
      "metadata": {
        "id": "TAgDVbbs11o0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Print dataframe including the bin feature\n",
        "print(df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qcVbefmx3BC9",
        "outputId": "72de6067-7ceb-4223-c2b5-5da295580c13"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    Cust ID Gender  Income  Age  ...  Avg Per Visit  Incidentals   Genre  bins\n",
            "0         1      M   45000   25  ...            2.5          Yes  Action   Mid\n",
            "1         2      F   54000   33  ...            3.4           No   Drama   Mid\n",
            "2         3      F   32000   20  ...            1.6           No  Comedy   Mid\n",
            "3         4      F   59000   70  ...            4.2          Yes   Drama   Mid\n",
            "4         5      M   37000   35  ...            3.2          Yes  Action   Mid\n",
            "5         6      M   18000   20  ...            1.7           No  Action   Low\n",
            "6         7      F   29000   45  ...            3.8           No   Drama   Low\n",
            "7         8      M   74000   25  ...            2.4          Yes  Action  High\n",
            "8         9      M   38000   21  ...            2.1           No  Comedy   Mid\n",
            "9        10      F   65000   40  ...            3.3           No   Drama  High\n",
            "10       11      F   41000   22  ...            2.3          Yes   Drama   Mid\n",
            "11       12      F   26000   22  ...            2.9          Yes  Action   Low\n",
            "12       13      M   83000   46  ...            3.6           No  Comedy  High\n",
            "13       14      M   45000   36  ...            2.7           No   Drama   Mid\n",
            "14       15      M   68000   30  ...            2.7          Yes  Comedy  High\n",
            "15       16      M   17000   19  ...            2.2          Yes  Action   Low\n",
            "16       17      M   36000   35  ...            3.5          Yes   Drama   Mid\n",
            "17       18      F    6000   16  ...            1.8          Yes  Action   Low\n",
            "18       19      F   24000   25  ...            3.1           No  Comedy   Low\n",
            "19       20      M   12000   16  ...            2.2          Yes  Action   Low\n",
            "20       21      F   47000   52  ...            3.1           No   Drama   Mid\n",
            "21       22      M   25000   33  ...            2.9          Yes   Drama   Low\n",
            "22       23      F    2000   15  ...            2.5           No  Comedy   Low\n",
            "23       24      F   79000   35  ...            3.8          Yes   Drama  High\n",
            "24       25      M    1000   16  ...            1.4          Yes  Comedy   Low\n",
            "25       26      F   56000   35  ...            2.6          Yes  Action   Mid\n",
            "26       27      F   62000   47  ...            3.6           No   Drama  High\n",
            "27       28      M   57000   52  ...            4.1           No  Comedy   Mid\n",
            "28       29      F   15000   18  ...            2.1          Yes  Action   Low\n",
            "29       30      M   41000   25  ...            1.4          Yes  Action   Mid\n",
            "30       31      F   49000   56  ...            3.2           No  Comedy   Mid\n",
            "31       32      M   47000   30  ...            3.1          Yes   Drama   Mid\n",
            "32       33      M   23000   25  ...            2.7           No  Action   Low\n",
            "33       34      F   29000   32  ...            2.9          Yes  Action   Low\n",
            "34       35      M   74000   29  ...            4.6          Yes  Action  High\n",
            "35       36      F   29000   21  ...            2.3           No  Comedy   Low\n",
            "36       37      M   89000   46  ...            1.2           No  Comedy  High\n",
            "37       38      M   41000   38  ...            3.3          Yes   Drama   Mid\n",
            "38       39      F   68000   35  ...            3.9           No  Comedy  High\n",
            "39       40      M   17000   19  ...            1.8           No  Action   Low\n",
            "40       41      F   50000   33  ...            1.4           No   Drama   Mid\n",
            "41       42      M   32000   25  ...            2.2          Yes  Action   Mid\n",
            "42       43      F   49000   28  ...            3.3          Yes   Drama   Mid\n",
            "43       44      M   35000   24  ...            1.7           No   Drama   Mid\n",
            "44       45      M   56000   38  ...            3.5          Yes   Drama   Mid\n",
            "45       46      F   57000   43  ...            1.1           No   Drama   Mid\n",
            "46       47      F   69000   35  ...            2.8          Yes   Drama  High\n",
            "47       48      F   52000   47  ...            1.6           No   Drama   Mid\n",
            "48       49      M   31000   25  ...            3.4          Yes  Action   Mid\n",
            "49       50      M   24000   20  ...            4.7           No  Action   Low\n",
            "\n",
            "[50 rows x 9 columns]\n"
          ]
        }
      ]
    }
  ]
}